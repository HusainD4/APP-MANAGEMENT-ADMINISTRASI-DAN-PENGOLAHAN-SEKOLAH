/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

/**
 *
 * @author HUSAIN
 */
import db.ConnectionDB;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import org.bson.Document;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import org.bson.types.ObjectId;
import org.mindrot.jbcrypt.BCrypt;

public class CreateForm extends javax.swing.JFrame {

    /**
     * Creates new form LoginForm
     */
    private String currentUsername;

    public CreateForm(String username) {
        initComponents();

        this.currentUsername = username; // Set username DULU sebelum pengecekan

        if (!isSuperAdmin(currentUsername)) {
            logoutToLoginForm();
            this.dispose(); // tutup form ini
            System.exit(0); // keluar dari aplikasi
            return;
        }

        initTableListener();
        loadUserData();
        setLocationRelativeTo(null);
        setTitle("User Management - Admin: " + currentUsername);
    }

    // Mengecek apakah user adalah superadmin
    public static boolean isSuperAdmin(String username) {
        try {
            MongoCollection<Document> collection = ConnectionDB.connect().getCollection("master");
            Document userDoc = collection.find(new Document("username", username)).first();
            if (userDoc != null) {
                String role = userDoc.getString("role");
                return "superadmin".equalsIgnoreCase(role);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    // Jika bukan superadmin, logout dan kembali ke login
    private void logoutToLoginForm() {
        JOptionPane.showMessageDialog(this, "Anda akan dialihkan ke halaman login.");
        this.dispose(); // Tutup form CreateForm
        LoginForm form = new LoginForm();
        form.setExtendedState(JFrame.MAXIMIZED_BOTH);
        new LoginForm().setVisible(true); // Buka LoginForm
    }

    // Tambahkan listener ke tabel
    private void initTableListener() {
        tbl_user.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_userMouseClicked(evt);
            }
        });
    }

    private String hashPassword(String plainPassword) {
        return BCrypt.hashpw(plainPassword, BCrypt.gensalt());
    }

    private boolean checkPassword(String plainPassword, String hashedPassword) {
        return BCrypt.checkpw(plainPassword, hashedPassword);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jscroll = new javax.swing.JScrollPane();
        tbl_user = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        btn_edit = new javax.swing.JToggleButton();
        btn_update = new javax.swing.JToggleButton();
        btn_delete = new javax.swing.JToggleButton();
        btn_backLogin = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        usernameTXT = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btn_submit = new javax.swing.JButton();
        passwordTXT = new javax.swing.JPasswordField();
        phonenumberTXT = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        confirmpasswordTXT = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MANAGE SCHOOL APPS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 924, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(153, 204, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        tbl_user.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAMA", "NOMOR TELP"
            }
        ));
        tbl_user.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_userMouseClicked(evt);
            }
        });
        jscroll.setViewportView(tbl_user);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 204, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("MANAGE ADMIN");

        btn_edit.setBackground(new java.awt.Color(255, 153, 51));
        btn_edit.setText("EDIT");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_update.setBackground(new java.awt.Color(153, 255, 51));
        btn_update.setText("UPDATE");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_delete.setBackground(new java.awt.Color(204, 0, 0));
        btn_delete.setForeground(new java.awt.Color(255, 255, 255));
        btn_delete.setText("DELETE");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_backLogin.setText("Back To Login");
        btn_backLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jscroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btn_backLogin, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jscroll, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_edit)
                    .addComponent(btn_update)
                    .addComponent(btn_delete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_backLogin)
                .addContainerGap())
        );

        usernameTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTXTActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 204, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("FORM");

        jSeparator1.setForeground(new java.awt.Color(153, 204, 255));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("------------------------- USERNAME -------------------------");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("------------------------- PASSWORD -------------------------");

        btn_submit.setBackground(new java.awt.Color(0, 153, 0));
        btn_submit.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btn_submit.setForeground(new java.awt.Color(255, 255, 255));
        btn_submit.setText("SUBMIT");
        btn_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_submitActionPerformed(evt);
            }
        });

        passwordTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordTXTActionPerformed(evt);
            }
        });

        phonenumberTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phonenumberTXTActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("--------------------- PHONE NUMMBER ---------------------");

        confirmpasswordTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmpasswordTXTActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("-------------------- CONFIRM PASSWORD --------------------");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordTXT)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(usernameTXT)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .addComponent(btn_submit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(phonenumberTXT)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(confirmpasswordTXT)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(usernameTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(phonenumberTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmpasswordTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(btn_submit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(227, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTXTActionPerformed
        phonenumberTXT.requestFocusInWindow();
    }//GEN-LAST:event_usernameTXTActionPerformed

    private void passwordTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTXTActionPerformed
        confirmpasswordTXT.requestFocusInWindow();
    }//GEN-LAST:event_passwordTXTActionPerformed

    private void btn_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_submitActionPerformed
        submit();
    }//GEN-LAST:event_btn_submitActionPerformed

    private void phonenumberTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phonenumberTXTActionPerformed
        passwordTXT.requestFocusInWindow();
    }//GEN-LAST:event_phonenumberTXTActionPerformed

    private void confirmpasswordTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmpasswordTXTActionPerformed
        btn_submit.doClick();
    }//GEN-LAST:event_confirmpasswordTXTActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        int selectedRow = tbl_user.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Silakan pilih user yang akan dihapus.");
            return;
        }

        String id = (String) tbl_user.getValueAt(selectedRow, 0);
        String usernameToDelete = (String) tbl_user.getValueAt(selectedRow, 1);

        // Cegah hapus superadmin
        if ("superadmin".equalsIgnoreCase(usernameToDelete)) {
            JOptionPane.showMessageDialog(this, "User 'superadmin' tidak boleh dihapus!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Yakin ingin menghapus user ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            MongoCollection<Document> collection = ConnectionDB.connect().getCollection("user");
            collection.deleteOne(new Document("_id", new org.bson.types.ObjectId(id)));

            // Setelah hapus, cek apakah superadmin masih ada
            if (!isSuperAdmin(currentUsername)) {
                JOptionPane.showMessageDialog(this, "Hanya admin yang boleh mengakses halaman ini.");
                this.dispose();
                return;
            }

            JOptionPane.showMessageDialog(this, "User berhasil dihapus!");
            clearForm();
            loadUserData();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus user: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        loadUserData();
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        if (!isSuperAdmin(currentUsername)) {
            JOptionPane.showMessageDialog(this, "Hanya admin yang boleh mengakses halaman ini.");
            this.dispose();
            return;
        }

        int selectedRow = tbl_user.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Pilih user yang akan diupdate dari tabel!");
            return;
        }

        String id = (String) tbl_user.getValueAt(selectedRow, 0);
        String username = usernameTXT.getText().trim();
        String phone = phonenumberTXT.getText().trim();
        String password = new String(passwordTXT.getPassword()).trim();
        String confirmPassword = new String(confirmpasswordTXT.getPassword()).trim();

        if (username.isEmpty() || phone.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username dan Nomor Telepon tidak boleh kosong!");
            return;
        }

        if (!password.isEmpty() && !password.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Password dan Konfirmasi Password tidak cocok!");
            return;
        }

        try {
            Document updateDoc = new Document("username", username)
                    .append("phone", phone);

            if (!password.isEmpty()) {
                String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt());
                updateDoc.append("password", hashedPassword);
            }

            MongoCollection<Document> collection = ConnectionDB.connect().getCollection("user");
            collection.updateOne(
                    new Document("_id", new org.bson.types.ObjectId(id)),
                    new Document("$set", updateDoc)
            );

            JOptionPane.showMessageDialog(this, "User berhasil diupdate!");
            clearForm();
            loadUserData();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "ID user tidak valid: " + id);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal update user: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_editActionPerformed

    private void tbl_userMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_userMouseClicked
        int selectedRow = tbl_user.getSelectedRow();
        if (selectedRow >= 0) {
            String username = (String) tbl_user.getValueAt(selectedRow, 1); // kolom username
            String phone = (String) tbl_user.getValueAt(selectedRow, 2);    // kolom phone

            usernameTXT.setText(username);
            phonenumberTXT.setText(phone);
            passwordTXT.setText("");
            confirmpasswordTXT.setText("");
        }
    }//GEN-LAST:event_tbl_userMouseClicked

    private void btn_backLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backLoginActionPerformed
        this.dispose(); // tutup form saat ini
        LoginForm login = new LoginForm();
        login.setExtendedState(JFrame.MAXIMIZED_BOTH); // fullscreen
        login.setVisible(true); // tampilkan
    }//GEN-LAST:event_btn_backLoginActionPerformed

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            String username = "admin"; // ganti dengan username yang login

            if (CreateForm.isSuperAdmin(username)) {
                // Tutup semua jendela sebelum membuka CreateForm
                for (java.awt.Window window : java.awt.Window.getWindows()) {
                    window.dispose();
                }

                // Buka CreateForm dalam mode fullscreen
                CreateForm form = new CreateForm(username);
                form.setExtendedState(JFrame.MAXIMIZED_BOTH); // Fullscreen
                form.setVisible(true);

            } else {
                JOptionPane.showMessageDialog(null, "Akses ditolak. Hanya superadmin yang diperbolehkan.");
                // Tutup semua form, kembali ke LoginForm
                for (java.awt.Window window : java.awt.Window.getWindows()) {
                    window.dispose();
                }
                LoginForm form = new LoginForm();
                form.setExtendedState(JFrame.MAXIMIZED_BOTH); // Fullscreen
                form.setVisible(true); // Panggil setVisible pada instance yang sudah diset fullscreen
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_backLogin;
    private javax.swing.JToggleButton btn_delete;
    private javax.swing.JToggleButton btn_edit;
    private javax.swing.JButton btn_submit;
    private javax.swing.JToggleButton btn_update;
    private javax.swing.JPasswordField confirmpasswordTXT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JScrollPane jscroll;
    private javax.swing.JPasswordField passwordTXT;
    private javax.swing.JTextField phonenumberTXT;
    private javax.swing.JTable tbl_user;
    private javax.swing.JTextField usernameTXT;
    // End of variables declaration//GEN-END:variables
// Memuat data user dari MongoDB ke dalam tabel

    private void loadUserData() {
        try {
            MongoCollection<Document> collection = ConnectionDB.connect().getCollection("user");
            try (MongoCursor<Document> cursor = collection.find().iterator()) {

                DefaultTableModel model = (DefaultTableModel) tbl_user.getModel();
                model.setRowCount(0); // Bersihkan tabel

                boolean superadminFound = false;

                while (cursor.hasNext()) {
                    Document doc = cursor.next();
                    String username = doc.getString("username") != null ? doc.getString("username") : "";
                    if ("superadmin".equalsIgnoreCase(username)) {
                        superadminFound = true;
                    }
                    Vector<Object> row = new Vector<>();
                    row.add(doc.getObjectId("_id").toString());
                    row.add(username);
                    row.add(doc.getString("phone") != null ? doc.getString("phone") : "");
                    model.addRow(row);
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data user: " + e.getMessage());
        }
    }

// Membuat user baru ke database
    private void createUser(String username, String phone, String password) {
        try {
            MongoCollection<Document> collection = ConnectionDB.connect().getCollection("user");

            Document newUser = new Document("username", username)
                    .append("phone", phone)
                    .append("password", password);

            collection.insertOne(newUser);
            loadUserData(); // Refresh tabel

            JOptionPane.showMessageDialog(this, "User berhasil dibuat!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal membuat user: " + e.getMessage());
        }
    }

// Menghapus user berdasarkan ID
    private void deleteUser(String id) {
        if (id == null || id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID user tidak valid.");
            return;
        }

        try {
            MongoCollection<Document> collection = ConnectionDB.connect().getCollection("user");
            collection.deleteOne(new Document("_id", new ObjectId(id)));

            loadUserData(); // Refresh tabel
            JOptionPane.showMessageDialog(this, "User berhasil dihapus!");
        } catch (IllegalArgumentException iae) {
            JOptionPane.showMessageDialog(this, "ID user tidak valid: " + iae.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus user: " + e.getMessage());
        }
    }

// Submit form untuk membuat user baru dengan validasi
    private void submit() {
        String username = usernameTXT.getText().trim();
        String phone = phonenumberTXT.getText().trim();
        String password = new String(passwordTXT.getPassword());
        String confirmPassword = new String(confirmpasswordTXT.getPassword());

        if (username.isEmpty() || phone.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua field harus diisi!");
            return;
        }

        if (!password.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Password dan konfirmasi password tidak sama!");
            return;
        }

        try {
            MongoCollection<Document> collection = ConnectionDB.connect().getCollection("user");

            Document existingUser = collection.find(new Document("username", username)).first();
            if (existingUser != null) {
                JOptionPane.showMessageDialog(this, "Username sudah digunakan, pilih username lain.");
                return;
            }

            String hashedPassword = hashPassword(password);

            Document newUser = new Document("username", username)
                    .append("phone", phone)
                    .append("password", hashedPassword);

            collection.insertOne(newUser);

            JOptionPane.showMessageDialog(this, "User berhasil dibuat!");
            clearForm();
            loadUserData();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal membuat user: " + e.getMessage());
        }
    }

// Mengosongkan form input
    private void clearForm() {
        usernameTXT.setText("");
        phonenumberTXT.setText("");
        passwordTXT.setText("");
        confirmpasswordTXT.setText("");
        usernameTXT.requestFocusInWindow();
    }
}
